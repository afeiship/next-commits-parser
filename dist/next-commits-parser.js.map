{"version":3,"sources":["next-commits-parser.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-commits-parser.js","sourcesContent":["(function () {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var groupBy = require('@feizheng/next-group-by');\n  var includesMulti = require('@feizheng/next-includes-multi');\n\n  var DEFAULT_OPTIONS = {\n    text: '',\n    actions: [\n      \"feat\",\n      \"fix\",\n      \"docs\",\n      \"style\",\n      \"refactor\",\n      \"perf\",\n      \"test\",\n      \"chore\",\n      \"revert\"\n    ],\n    template: nx.stubValue\n  }\n\n  nx.commitsParser = function (inOptions) {\n    var options = nx.mix(null, DEFAULT_OPTIONS, inOptions);\n    var commits = options.text.split('\\n');\n    var loggers = [];\n\n    if (!options.text) return null;\n\n    commits.forEach(function (commit) {\n      nx.forEach(options.actions, function (action) {\n        var target = [action + ':', action + '('];\n        if (includesMulti(commit, { target: target })) {\n          loggers.push({ action: action, message: options.template(commit) })\n          return nx.BREAKER;\n        }\n      })\n    });\n\n    return groupBy(loggers, function (_, item) {\n      return item.action\n    });\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = nx.commitsParser;\n  }\n})();\n"]}